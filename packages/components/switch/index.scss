.fluent-switch {
  align-items: flex-start;
  box-sizing: border-box;
  display: inline-flex;
  position: relative;

  &-lively {
    .fluent-switch__indicator {
      font-size: 14px;
      padding: 2px;
      transition:
        font-size 0.075s ease,
        padding 0.075s ease;
    }

    .fluent-switch__input:not(:disabled):hover {
      & ~ .fluent-switch__indicator {
        font-size: 16px;
        padding: 1px;
      }
    }
  }

  &__input {
    top: 0;
    left: 0;
    box-sizing: border-box;
    cursor: pointer;
    height: 100%;
    margin: 0px;
    opacity: 0;
    position: absolute;
    width: calc(40px + 2 * var(--spacingHorizontalS));

    &:checked ~ .fluent-switch__indicator > * {
      transform: translateX(20px);
    }

    &:enabled {
      &:checked {
        & ~ .fluent-switch__indicator {
          background-color: var(--colorCompoundBrandBackground);
          color: var(--colorNeutralForegroundInverted);
          border-color: var(--colorTransparentStroke);
        }

        &:hover {
          & ~ .fluent-switch__indicator {
            background-color: var(--colorCompoundBrandBackgroundHover);
            border-color: var(--colorTransparentStrokeInteractive);
          }

          &:active ~ .fluent-switch__indicator {
            background-color: var(--colorCompoundBrandBackgroundPressed);
            border-color: var(--colorTransparentStrokeInteractive);
          }
        }
      }

      &:not(:checked) {
        & ~ .fluent-switch__indicator {
          color: var(--colorNeutralStrokeAccessible);
          border-color: var(--colorNeutralStrokeAccessible);
          color: var(--colorNeutralStrokeAccessible);
          border-color: var(--colorNeutralStrokeAccessible);
        }

        &:hover {
          & ~ .fluent-switch__indicator {
            color: var(--colorNeutralStrokeAccessibleHover);
            border-color: var(--colorNeutralStrokeAccessibleHover);
          }

          &:active ~ .fluent-switch__indicator {
            color: var(--colorNeutralStrokeAccessiblePressed);
            border-color: var(--colorNeutralStrokeAccessiblePressed);
          }
        }
      }
    }

    &:disabled {
      cursor: default;
    }

    &:disabled:not(:checked) ~ .fluent-switch__indicator {
      border-color: var(--colorNeutralStrokeDisabled);
    }

    &:disabled:checked ~ .fluent-switch__indicator {
      background-color: var(--colorNeutralBackgroundDisabled);
      border-color: var(--colorTransparentStrokeDisabled);
    }

    &:disabled ~ .fluent-switch__indicator {
      color: var(--colorNeutralForegroundDisabled);
    }

    &:disabled ~ .fluent-switch__label {
      cursor: default;
      color: var(--colorNeutralForegroundDisabled);
    }
  }

  &-label-above {
    flex-direction: column;
  }

  &-label-before {
    & .fluent-switch__input {
      right: 0;
      left: unset;
    }
  }

  &__label {
    margin-top: calc((20px - var(--lineHeightBase300)) / 2);
    margin-bottom: calc((20px - var(--lineHeightBase300)) / 2);
    cursor: pointer;
    padding-left: var(--spacingHorizontalXS);
    padding: var(--spacingVerticalS) var(--spacingHorizontalS);
  }

  &__indicator {
    color: var(--colorNeutralStrokeAccessible);
    border-color: var(--colorNeutralStrokeAccessible);
    border-radius: var(--borderRadiusCircular);
    border: 1px solid;
    line-height: 0;
    box-sizing: border-box;
    fill: currentcolor;
    flex-shrink: 0;
    font-size: 18px;
    height: 20px;
    margin: var(--spacingVerticalS) var(--spacingHorizontalS);
    pointer-events: none;
    transition-duration: var(--durationNormal);
    transition-timing-function: var(--curveEasyEase);
    transition-property: background, border, color;
    width: 40px;

    & > svg {
      transition-duration: var(--durationNormal);
      transition-timing-function: var(--curveEasyEase);
      transition-property: transform;
    }

    & > svg {
      display: inline;
      line-height: 0;
    }
  }
}
